// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team2129.robot;

import org.usfirst.frc.team2129.robot.commands.AutonomousCommand;
import org.usfirst.frc.team2129.robot.commands.ShooterDown;
import org.usfirst.frc.team2129.robot.commands.ShooterFastDown;
import org.usfirst.frc.team2129.robot.commands.ShooterLockElevation;
import org.usfirst.frc.team2129.robot.commands.ShooterSpew;
import org.usfirst.frc.team2129.robot.commands.ShooterSuck;
import org.usfirst.frc.team2129.robot.commands.ShooterUp;
import org.usfirst.frc.team2129.robot.devices.JoystickPOVStateCheckTrigger;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.buttons.Trigger;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftJoystick;
    public Joystick rightJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Shooter control buttons
    public JoystickButton buttonSpew;
    public JoystickButton buttonSuck;
    
    // Shooter elevation controls
    public Trigger rightPOVZeroTrigger;
    public Trigger rightPOV180Trigger;
    public Trigger rightPOV90Trigger;
    public JoystickButton buttonShooterElevatorLock;
    
    // Ball pusher control
    public JoystickButton buttonBallPusher;
        
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        rightJoystick = new Joystick(1);
        leftJoystick  = new Joystick(0);
        
        
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        // Assign the button IDs to our JoystickButton and Trigger objects
        buttonSpew                 = new JoystickButton( rightJoystick, 1 );
        buttonSuck                 = new JoystickButton( leftJoystick,  1 );
        rightPOVZeroTrigger        = new JoystickPOVStateCheckTrigger( rightJoystick, 0   );
        rightPOV180Trigger         = new JoystickPOVStateCheckTrigger( rightJoystick, 180 );
        rightPOV90Trigger          = new JoystickPOVStateCheckTrigger( rightJoystick, 90  );
        buttonShooterElevatorLock  = new JoystickButton( leftJoystick, 5 );
        buttonBallPusher           = new JoystickButton( rightJoystick, 2 );
        
        // Assign Command objects to the buttons and triggers
        buttonSpew.whileHeld           ( new ShooterSpew()     );
        buttonSuck.whileHeld           ( new ShooterSuck()     );
        rightPOVZeroTrigger.whileActive( new ShooterUp  ()     );
        rightPOV180Trigger.whileActive ( new ShooterDown()     );
        rightPOV90Trigger.whileActive  ( new ShooterFastDown() );
        buttonShooterElevatorLock.whileHeld (new ShooterLockElevation() );
        buttonBallPusher.whenPressed   ( new PusherOut() );
        
        // Set display of commands on SmartDashboard
        SmartDashboard.putData("Suck",                   new ShooterSuck()          );
        SmartDashboard.putData("Spew",                   new ShooterSpew()          );
        SmartDashboard.putData("Shooter Up",             new ShooterUp()            );
        SmartDashboard.putData("Shooter Down",           new ShooterDown()          );
        SmartDashboard.putData("Shooter Fast Down",      new ShooterFastDown()      );
        SmartDashboard.putData("Shooter Elevation Lock", new ShooterLockElevation() );
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

